#version 460
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE compute
#pragma shader_stage(compute)

#include "Compute/Compute.h"

layout(
    local_size_x = LOCAL_SIZE_X,
    local_size_y = LOCAL_SIZE_Y,
    local_size_z = LOCAL_SIZE_Z) in;

layout(push_constant) uniform PushConstants{
    uint width;
    uint height;
    uint faceIndex;
};

layout(set = 0, binding = 0, rgba32f) uniform image2D cubeFace;
layout(set = 1, binding = 0) uniform sampler2D equirectangular;

vec2 CalculateEquirectangularTexCoord(vec3 direction)
{
    return vec2(atan(direction.z, -direction.x), asin(-direction.y)) * vec2(0.1591f, 0.3183) + 0.5f;
}

void main()
{
    const vec2 xy = gl_GlobalInvocationID.xy / vec2(float(width), float(height)) * 2.0f - 1.0f;

    const vec3 faceNormals[6] = vec3[6](
        vec3(1.0f, 0.0f, 0.0f),
        vec3(-1.0f, 0.0f, 0.0f),
        vec3(0.0f, 1.0f, 0.0f),
        vec3(0.0f, -1.0f, 0.0f),
        vec3(0.0f, 0.0f, 1.0f),
        vec3(0.0f, 0.0f, -1.0f)
    );

    const vec3 faceTangents[6] = vec3[6](
        vec3(0.0f, 0.0f, -1.0f),
        vec3(0.0f, 0.0f, 1.0f),
        vec3(1.0f, 0.0f, 0.0f),
        vec3(1.0f, 0.0f, 0.0f),
        vec3(1.0f, 0.0f, 0.0f),
        vec3(-1.0f, 0.0f, 0.0f)
    );

    const vec3 faceBitangents[6] = vec3[6](
        vec3(0.0f, -1.0f, 0.0f),
        vec3(0.0f, -1.0f, 0.0f),
        vec3(0.0f, 0.0f, 1.0f),
        vec3(0.0f, 0.0f, -1.0f),
        vec3(0.0f, -1.0f, 0.0f),
        vec3(0.0f, -1.0f, 0.0f)
    );

    const vec3 direction = normalize(faceNormals[faceIndex] + xy.x * faceTangents[faceIndex] + xy.y * faceBitangents[faceIndex]);
    const vec2 texCoord = CalculateEquirectangularTexCoord(direction);

    imageStore(cubeFace, ivec2(gl_GlobalInvocationID), texture(equirectangular, texCoord));
}