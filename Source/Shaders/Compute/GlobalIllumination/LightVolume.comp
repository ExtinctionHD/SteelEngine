#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#include "Common/Stages.h"
#define SHADER_STAGE COMPUTE_STAGE
#pragma shader_stage(compute)

#define SAMPLE_DELTA 0.05

#include "Common/Common.h"
#include "Common/Common.glsl"

layout(constant_id = 0) const uint LOCAL_SIZE_X = SH_COEFFICIENT_COUNT;
layout(constant_id = 1) const uint LOCAL_SIZE_Y = 1;
layout(constant_id = 2) const uint LOCAL_SIZE_Z = 1;

layout(
    local_size_x_id = 0,
    local_size_y_id = 1,
    local_size_z_id = 2) in;

layout(set = 0, binding = 0) uniform samplerCube probe;
layout(set = 1, binding = 0) writeonly buffer Coefficients{ float coefficients[]; };

layout(push_constant) uniform PushConstants{
    uint probeIndex;
};

vec3 ComputeSH(uint index, vec3 N, vec3 luminance)
{
    switch (index)
    {
    case 0:
        return 0.282095 * luminance;

    case 1:
        return 0.488603 * N.y * luminance;
    case 2:
        return 0.488603 * N.z * luminance;
    case 3:
        return 0.488603 * N.x * luminance;
        
    case 4:
        return 1.092548 * N.x * N.y * luminance;
    case 5:
        return 1.092548 * N.y * N.z * luminance;
    case 6:
        return 0.315392 * (3.0 * Pow2(N.z) - 1.0) * luminance;
    case 7:
        return 1.092548 * N.x * N.z * luminance;
    case 8:
        return 0.546274 * (Pow2(N.x) - Pow2(N.y)) * luminance;
    }

    return vec3(0.0);
}

void main()
{
    vec3 coeffs[SH_COEFFICIENT_COUNT];
    for (uint i = 0; i < SH_COEFFICIENT_COUNT; ++i)
    {
        coeffs[i] = vec3(0.0);
    }

    uint sampleCount = 0;
    for (float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)
    {
        for (float theta = 0.0; theta < PI; theta += SAMPLE_DELTA)
        {
            const vec3 N = normalize(vec3(
                sin(theta) * cos(phi),
                sin(theta) * sin(phi),
                cos(theta)));

            const vec3 luminance = texture(probe, N).rgb;
            
            for (uint i = 0; i < SH_COEFFICIENT_COUNT; ++i)
            {
                coeffs[i] += ComputeSH(i, N, luminance) * sin(theta);
            }

            ++sampleCount;
        }
    }

    for (uint i = 0; i < SH_COEFFICIENT_COUNT; ++i)
    {
        coeffs[i] = 2.0 * PI * coeffs[i] / float(sampleCount);
        
        const uint index = probeIndex * SH_COEFFICIENT_COUNT * 3 + i * 3;
        
        coefficients[index + 0] = coeffs[i].x;
        coefficients[index + 1] = coeffs[i].y;
        coefficients[index + 2] = coeffs[i].z;
    }
}