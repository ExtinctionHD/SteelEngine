#version 460
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE compute
#pragma shader_stage(compute)

#include "Common/Common.h"
#include "Common/Common.glsl"

layout(constant_id = 0) const uint BLOCK_SIZE_X = 8;
layout(constant_id = 1) const uint BLOCK_SIZE_Y = 8;

layout(
    local_size_x = 1,
    local_size_y = 1,
    local_size_z = 1) in;

layout(push_constant) uniform PushConstants{
    uvec2 panoramaExtent;
};

layout(set = 0, binding = 0) buffer locationBuffer{ uvec2 location; };
layout(set = 1, binding = 0) buffer paramsBuffer{ DirectLight params; };
layout(set = 1, binding = 1) uniform sampler2D panorama;

void main()
{
    const vec2 blockSize = vec2(BLOCK_SIZE_X, BLOCK_SIZE_Y);

    const vec2 p = location * blockSize + blockSize / 2.0;

    const vec2 uv = p / panoramaExtent;

    const vec2 xy = vec2(uv.x, 1.0 - uv.y) * 2.0 - 1.0;

    const float theta = xy.x * PI;
    const float phi = xy.y * PI * 0.5f;

    const vec3 direction = vec3(
        cos(phi) * cos(theta),
        sin(phi),
        cos(phi) * sin(theta));

    const float lod = log2(max(blockSize.x, blockSize.y));

    params.direction = vec4(normalize(-direction), 0.0);
    params.color = textureLod(panorama, uv, lod);
}