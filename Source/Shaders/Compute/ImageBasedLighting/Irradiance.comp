#version 460

#extension GL_GOOGLE_include_directive : require

#include "Common/Stages.h"
#define SHADER_STAGE COMPUTE_STAGE
#pragma shader_stage(compute)

#define SAMPLE_DELTA 0.025

#include "Common/Common.glsl"
#include "Compute/Compute.glsl"
#include "Compute/ThreadGroupTiling.glsl"

layout(constant_id = 0) const uint LOCAL_SIZE_X = 8;
layout(constant_id = 1) const uint LOCAL_SIZE_Y = 8;
layout(constant_id = 2) const uint LOCAL_SIZE_Z = 1;

layout(
    local_size_x_id = 0,
    local_size_y_id = 1,
    local_size_z_id = 2) in;

layout(set = 0, binding = 0) uniform samplerCube environmentMap;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D irradianceFace;

layout(push_constant) uniform PushConstants{
    uint faceIndex;
};

void main()
{
    const uvec2 id = TiledGlobalInvocationID.xy;

    const vec2 uv = GetUV(id, imageSize(irradianceFace));
    
    const vec3 N = GetCubeDirection(faceIndex, uv);
    
    const mat3 TBN = GetTBN(N);

    uint sampleCount = 0;
    vec3 irradiance = vec3(0.0);

    for (float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)
    {
        for (float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA)
        {
            const vec3 tangentDirection = vec3(
                sin(theta) * cos(phi),
                sin(theta) * sin(phi),
                cos(theta));

            const vec3 worldDirection = TangentToWorld(tangentDirection, TBN);

            irradiance += texture(environmentMap, worldDirection).rgb * cos(theta) * sin(theta);

            ++sampleCount;
        }
    }

    irradiance = PI * irradiance / float(sampleCount);

    imageStore(irradianceFace, ivec2(id), vec4(irradiance, 1.0));
}