#version 460
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE compute
#pragma shader_stage(compute)

#include "Common/Common.glsl"
#include "Common/MonteCarlo.glsl"
#include "Common/PBR.glsl"
#include "Compute/Compute.glsl"

#define SAMPLE_COUNT 1024

layout(constant_id = 0) const uint LOCAL_SIZE_X = 16;
layout(constant_id = 1) const uint LOCAL_SIZE_Y = 16;
layout(constant_id = 2) const uint LOCAL_SIZE_Z = 1;

layout(
    local_size_x_id = 0,
    local_size_y_id = 1,
    local_size_z_id = 2) in;

layout(push_constant) uniform PushConstants{
    uint width;
    uint height;
    float roughness;
    uint faceIndex;
};

layout(set = 0, binding = 0) uniform samplerCube environmentMap;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D reflectionFace;

void main()
{
    const vec2 uv = gl_GlobalInvocationID.xy / vec2(float(width), float(height));
    
    const vec3 N = GetCubeDirection(faceIndex, uv);
    const vec3 R = N;
    const vec3 V = R;

    const mat3 TBN = GetTBN(N);

    const float a2 = roughness * roughness;
    
    vec3 result = vec3(0.0);
    float totalWeight = 0.0;
    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        const vec2 Xi = Hammersley(i, SAMPLE_COUNT);

        const vec3 H = TangentToWorld(ImportanceSampleGGX(Xi, a2), TBN);

        const vec3 L = -reflect(V, H);

        const float NoL = dot(N, L);
        if (NoL > 0.0)
        {
            result += texture(environmentMap, L).rgb * NoL;
            totalWeight += NoL;
        }
    }

    result /= totalWeight;

    imageStore(reflectionFace, ivec2(gl_GlobalInvocationID), vec4(result, 1.0));
}