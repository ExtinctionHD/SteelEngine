#version 460
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE compute
#pragma shader_stage(compute)

#include "Compute/Compute.glsl"

layout(constant_id = 0) const uint LOCAL_SIZE_X = 8;
layout(constant_id = 1) const uint LOCAL_SIZE_Y = 8;

layout(
    local_size_x_id = 0,
    local_size_y_id = 1,
    local_size_z = 1) in;

layout(push_constant) uniform PushConstants{
    uint faceIndex;
};

layout(set = 0, binding = 0) uniform sampler2D panorama;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D cubeFace;

vec2 CalculatePanoramaTexCoord(vec3 direction)
{
    const vec2 inverseAtan = vec2(0.1591, 0.3183);

    return vec2(atan(direction.z, direction.x), asin(direction.y)) * inverseAtan + 0.5;
}

void main()
{
    const vec2 uv = GetUV(gl_GlobalInvocationID.xy, imageSize(cubeFace));

    const vec3 direction = GetCubeDirection(faceIndex, uv);

    const vec2 texCoord = CalculatePanoramaTexCoord(direction * vec3(1.0, -1.0, 1.0));

    imageStore(cubeFace, ivec2(gl_GlobalInvocationID), texture(panorama, texCoord));
}