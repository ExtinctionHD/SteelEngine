#version 460
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE compute
#pragma shader_stage(compute)

#include "Common/Constants.glsl"

layout(constant_id = 0) const uint LOCAL_SIZE_X = 16;
layout(constant_id = 1) const uint LOCAL_SIZE_Y = 16;
layout(constant_id = 2) const uint LOCAL_SIZE_Z = 1;

layout(
    local_size_x_id = 0,
    local_size_y_id = 1,
    local_size_z_id = 2) in;

layout(push_constant) uniform PushConstants{
    uint width;
    uint height;
    uint faceIndex;
};

layout(set = 0, binding = 0) uniform sampler2D panorama;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D cubeFace;

vec2 CalculatePanoramaTexCoord(vec3 direction)
{
    const vec2 inverseAtan = vec2(0.1591, 0.3183);

    return vec2(atan(direction.z, direction.x), asin(direction.y)) * inverseAtan + 0.5;
}

void main()
{
    const vec2 uv = gl_GlobalInvocationID.xy / vec2(float(width), float(height));
    const vec2 xy = uv * 2.0 - 1.0;

    const vec3 normal = CUBE_FACES_NORMALS[faceIndex];
    const vec3 tangent = CUBE_FACES_TANGENTS[faceIndex];
    const vec3 binormal = CUBE_FACES_BINORMALS[faceIndex];
    
    const vec3 direction = normalize(normal + xy.x * tangent + xy.y * binormal);
    const vec2 texCoord = CalculatePanoramaTexCoord(direction);

    imageStore(cubeFace, ivec2(gl_GlobalInvocationID), texture(panorama, texCoord));
}