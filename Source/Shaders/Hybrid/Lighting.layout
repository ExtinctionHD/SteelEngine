#define SHADER_LAYOUT

#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : enable

#ifndef SHADER_STAGE
    #include "Common/Stages.h"
    #define SHADER_STAGE COMPUTE_STAGE
    #pragma shader_stage(compute)
    void main() {}
#endif

#include "Common/Common.h"

#if SHADER_STAGE == COMPUTE_STAGE
    layout(constant_id = 0) const uint LOCAL_SIZE_X = 8;
    layout(constant_id = 1) const uint LOCAL_SIZE_Y = 8;
    layout(constant_id = 2) const uint LOCAL_SIZE_Z = 1;

    layout(
        local_size_x_id = 0,
        local_size_y_id = 1,
        local_size_z_id = 2) in;
#endif

// Global
layout(set = 0, binding = 0) uniform lightUBO{ Light lights[MAX_LIGHT_COUNT]; };

layout(set = 0, binding = 1) uniform sampler2D depthTexture;
layout(set = 0, binding = 2, r11f_g11f_b10f) uniform image2D sceneColorTexture;
layout(set = 0, binding = 3, rgb10_a2) uniform readonly image2D normalTexture;
layout(set = 0, binding = 4, rgba8) uniform readonly image2D baseColorOcclusionTexture;
layout(set = 0, binding = 5, rg8) uniform readonly image2D roughnessMetallicTexture;

layout(set = 0, binding = 6) uniform samplerCube irradianceMap;
layout(set = 0, binding = 7) uniform samplerCube reflectionMap;
layout(set = 0, binding = 8) uniform sampler2D specularLut;
#if LIGHT_VOLUME_ENABLED
    layout(set = 0, binding = 9) readonly buffer Positions{ float positions[]; };
    layout(set = 0, binding = 10) readonly buffer Tetrahedral{ Tetrahedron tetrahedral[]; };
    layout(set = 0, binding = 11) readonly buffer Coefficients{ float coefficients[]; };
#endif
#if RAY_TRACING_ENABLED
    layout(set = 0, binding = 12) uniform accelerationStructureEXT tlas;
    layout(set = 0, binding = 13, scalar) readonly buffer IndexBuffers{ uvec3 indices[]; } indexBuffers[MAX_PRIMITIVE_COUNT];
    layout(set = 0, binding = 14, scalar) readonly buffer TexCoordBuffers{ vec2 texCoords[]; } texCoordBuffers[MAX_PRIMITIVE_COUNT];
    layout(set = 0, binding = 15) uniform materialUBO{ Material materials[MAX_MATERIAL_COUNT]; };
    layout(set = 0, binding = 16) uniform sampler2D materialTextures[MAX_TEXTURE_COUNT];
#endif

// Frame
layout(set = 1, binding = 0, scalar) uniform frameUBO{ Frame frame; };

// Drawcall
layout(push_constant) uniform PushConstants{
    uint lightCount;
};
