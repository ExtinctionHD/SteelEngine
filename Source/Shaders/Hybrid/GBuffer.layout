#ifndef GBUFFER_LAYOUT
#define GBUFFER_LAYOUT

#extension GL_GOOGLE_include_directive : require

#ifndef SHADER_STAGE
    #include "Common/Stages.h"
    #define SHADER_STAGE VERTEX_STAGE
    #pragma shader_stage(vertex)
    void main() {}
#endif

#define SHADER_LAYOUT

layout(set = 0, binding = 0) uniform cameraUBO{ mat4 viewProj; };

layout(set = 1, binding = 0) uniform sampler2D materialTextures[];
#if MATERIAL_COUNT > 0
    layout(set = 1, binding = 1) uniform materialUBO{ Material materials[MATERIAL_COUNT]; };
#endif

layout(push_constant) uniform PushConstants{
    mat4 transform;
    vec3 cameraPosition;
    uint materialIndex;
};

#if SHADER_STAGE == VERTEX_STAGE
    layout(location = 0) in vec3 inPosition;
    #if !DEPTH_ONLY
        layout(location = 1) in vec3 inNormal;
        layout(location = 2) in vec3 inTangent;
        layout(location = 3) in vec2 inTexCoord;

        layout(location = 0) out vec3 outPosition;
        layout(location = 1) out vec3 outNormal;
        layout(location = 2) out vec2 outTexCoord;
        #if NORMAL_MAPPING
            layout(location = 3) out vec3 outTangent;
        #endif
    #endif
#endif

#if SHADER_STAGE == FRAGMENT_STAGE
    layout(location = 0) in vec3 inPosition;
    layout(location = 1) in vec3 inNormal;
    layout(location = 2) in vec2 inTexCoord;
    #if NORMAL_MAPPING
        layout(location = 3) in vec3 inTangent;
    #endif

    layout(location = 0) out vec4 gBuffer0;
    layout(location = 1) out vec4 gBuffer1;
    layout(location = 2) out vec4 gBuffer2;
    layout(location = 3) out vec4 gBuffer3;
#endif

#endif
