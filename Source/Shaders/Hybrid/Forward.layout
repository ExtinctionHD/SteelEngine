#define SHADER_LAYOUT

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : enable

#ifndef SHADER_STAGE
    #include "Common/Stages.h"
    #define SHADER_STAGE VERTEX_STAGE
    #pragma shader_stage(vertex)
    void main() {}
#endif

layout(set = 0, binding = 0) uniform cameraUBO{ mat4 viewProj; };

layout(set = 1, binding = 0) uniform sampler2D materialTextures[];
#if MATERIAL_COUNT > 0
    layout(set = 1, binding = 1) uniform materialUBO{ Material materials[MATERIAL_COUNT]; };
#endif

#if LIGHT_COUNT > 0
    layout(set = 2, binding = 0) uniform lightUBO{ Light lights[LIGHT_COUNT]; };
#endif
layout(set = 2, binding = 1) uniform samplerCube irradianceMap;
layout(set = 2, binding = 2) uniform samplerCube reflectionMap;
layout(set = 2, binding = 3) uniform sampler2D specularBRDF;

#if LIGHT_VOLUME_ENABLED
    layout(set = 2, binding = 4) readonly buffer Positions{ float positions[]; };
    layout(set = 2, binding = 5) readonly buffer Tetrahedral{ Tetrahedron tetrahedral[]; };
    layout(set = 2, binding = 6) readonly buffer Coefficients{ float coefficients[]; };
#endif

#if RAY_TRACING_ENABLED
    layout(set = 3, binding = 0) uniform accelerationStructureEXT tlas;
    layout(set = 3, binding = 1) uniform sampler2D materialTextures[];
    layout(set = 3, binding = 2, scalar) readonly buffer IndexBuffers{ uvec3 indices[]; } indexBuffers[];
    layout(set = 3, binding = 3, scalar) readonly buffer TexCoordBuffers{ vec2 texCoords[]; } texCoordBuffers[];
#endif

layout(push_constant) uniform PushConstants{
    mat4 transform;
    vec3 cameraPosition;
    uint materialIndex;
};

#if SHADER_STAGE == VERTEX_STAGE
    layout(location = 0) in vec3 inPosition;
    #if !DEPTH_ONLY
        layout(location = 1) in vec3 inNormal;
        layout(location = 2) in vec3 inTangent;
        layout(location = 3) in vec2 inTexCoord;

        layout(location = 0) out vec3 outPosition;
        layout(location = 1) out vec3 outNormal;
        layout(location = 2) out vec2 outTexCoord;
        #if NORMAL_MAPPING
            layout(location = 3) out vec3 outTangent;
        #endif
    #endif
#endif

#if SHADER_STAGE == FRAGMENT_STAGE
    layout(location = 0) in vec3 inPosition;
    layout(location = 1) in vec3 inNormal;
    layout(location = 2) in vec2 inTexCoord;
    #if NORMAL_MAPPING
        layout(location = 3) in vec3 inTangent;
    #endif

    layout(location = 0) out vec4 outColor;
#endif
