#version 460

#extension GL_GOOGLE_include_directive : require

#include "Common/Stages.h"
#define SHADER_STAGE COMPUTE_STAGE
#pragma shader_stage(compute)

#define RAY_TRACING_ENABLED 1
#define LIGHT_VOLUME_ENABLED 1

#include "Compute/Compute.glsl"
#include "Compute/ThreadGroupTiling.glsl"

#include "Hybrid/Lighting.layout"
#include "Hybrid/Lighting.glsl"

vec3 RestorePosition(float depth, vec2 uv)
{
    const vec4 clipPosition = vec4(uv * 2.0 - 1.0, depth, 1.0);

    vec4 worldPosition = frame.inverseProjView * clipPosition;
    worldPosition /= worldPosition.w;

    return worldPosition.xyz;
}

void main()
{
    const uvec2 id = TiledGlobalInvocationID.xy;

    const vec3 normal = imageLoad(normalTexture, ivec2(id)).rgb;
    const vec3 sceneColor = imageLoad(sceneColorTexture, ivec2(id)).rgb;
    const vec4 baseColorOcclusion = imageLoad(baseColorOcclusionTexture, ivec2(id)).rgba;
    const vec2 roughnessMetallic = imageLoad(roughnessMetallicTexture, ivec2(id)).rg;

    const float depth = texture(depthTexture, vec2(id)).r;
    const vec2 uv = GetUV(id, textureSize(depthTexture, 0));
    const vec3 position = RestorePosition(depth, uv);

    const vec3 N = normal.rgb * 2.0 - 1.0;
    const vec3 emission = ToLinear(sceneColor.rgb);
    const vec3 baseColor = ToLinear(baseColorOcclusion.rgb);
    const float occlusion = baseColorOcclusion.a;
    #if DEBUG_OVERRIDE_MATERIAL
        const float roughness = DEBUG_ROUGHNESS;
        const float metallic = DEBUG_METALLIC;
    #else
        const float roughness = roughnessMetallic.r;
        const float metallic = roughnessMetallic.g;
    #endif

    const vec3 F0 = mix(DIELECTRIC_F0, baseColor, metallic);

    const vec3 V = normalize(frame.cameraPosition - position);

    const float NoV = CosThetaWorld(N, V);

    const vec3 directLighting = ComputeDirectLighting(position, N, V, NoV, baseColor, F0, roughness, metallic);

    const vec3 indirectLighting = ComputeIndirectLighting(position, N, V, NoV, baseColor, F0, roughness, metallic, occlusion);

    const vec3 result = indirectLighting + directLighting + emission;

    imageStore(sceneColorTexture, ivec2(id), vec4(result, 1.0));
}