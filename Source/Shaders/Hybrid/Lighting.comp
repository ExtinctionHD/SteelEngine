#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE compute
#pragma shader_stage(compute)

#include "Common/Common.h"
#include "Common/Common.glsl"
#include "Common/Debug.glsl"
#include "Common/PBR.glsl"
#include "Compute/Compute.glsl"
#include "Compute/ThreadGroupTiling.glsl"
#include "Hybrid/Hybrid.glsl"

#define LIGHT_COUNT 8
#define RAY_TRACING_ENABLED 1
#define LIGHT_VOLUME_ENABLED 1

#define LIGHTING_SET_INDEX 3
#define RAY_QUERY_SET_INDEX 4
#include "Hybrid/Lighting.glsl"

layout(constant_id = 0) const uint LOCAL_SIZE_X = 8;
layout(constant_id = 1) const uint LOCAL_SIZE_Y = 8;

layout(
    local_size_x_id = 0,
    local_size_y_id = 1,
    local_size_z = 1) in;

layout(push_constant) uniform PushConstants{
    vec3 cameraPosition;
};
    
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D renderTarget;

layout(set = 1, binding = 0, rgb10_a2) uniform readonly image2D gBufferTexture0;
layout(set = 1, binding = 1, r11f_g11f_b10f) uniform readonly image2D gBufferTexture1;
layout(set = 1, binding = 2, rgba8) uniform readonly image2D gBufferTexture2;
layout(set = 1, binding = 3, rg8) uniform readonly image2D gBufferTexture3;
layout(set = 1, binding = 4) uniform sampler2D depthTexture;

layout(set = 2, binding = 0) uniform cameraBuffer{ mat4 inverseProjView; };

// layout(set = 3, binding = 0...6) located in Hybrid/Lighting.glsl

// layout(set = 4, binding = 0...4) located in Hybrid/RayQuery.glsl

vec3 RestorePosition(float depth, vec2 uv)
{
    const vec4 clipPosition = vec4(uv * 2.0 - 1.0, depth, 1.0);

    vec4 worldPosition = inverseProjView * clipPosition;
    worldPosition /= worldPosition.w;

    return worldPosition.xyz;
}

void main()
{
    const uvec2 id = TiledGlobalInvocationID.xy;

    const vec3 gBuffer0 = imageLoad(gBufferTexture0, ivec2(id)).rgb;
    const vec3 gBuffer1 = imageLoad(gBufferTexture1, ivec2(id)).rgb;
    const vec4 gBuffer2 = imageLoad(gBufferTexture2, ivec2(id)).rgba;
    const vec2 gBuffer3 = imageLoad(gBufferTexture3, ivec2(id)).rg;

    const vec3 N = gBuffer0.rgb * 2.0 - 1.0;
    const vec3 emission = ToLinear(gBuffer1.rgb);
    const vec3 albedo = ToLinear(gBuffer2.rgb);
    const float occlusion = gBuffer2.a;
    #if DEBUG_OVERRIDE_MATERIAL
        const float roughness = DEBUG_ROUGHNESS;
        const float metallic = DEBUG_METALLIC;
    #else
        const float roughness = gBuffer3.r;
        const float metallic = gBuffer3.g;
    #endif

    const vec3 F0 = mix(DIELECTRIC_F0, albedo, metallic);

    const float depth = texture(depthTexture, vec2(id)).r;
    const vec2 uv = GetUV(id, textureSize(depthTexture, 0));

    const vec3 position = RestorePosition(depth, uv);

    const vec3 V = normalize(cameraPosition - position);

    const float NoV = CosThetaWorld(N, V);

    const vec3 directLighting = CalculateDirectLighting(position, V, N, NoV, albedo, F0, roughness, metallic);

    const vec3 indirectLighting = CalculateIndirectLighting(position, V, N, NoV, albedo, F0, roughness, metallic, occlusion);

    const vec3 result = ToneMapping(indirectLighting + directLighting + emission);

    imageStore(renderTarget, ivec2(id), vec4(result, 1.0));
}