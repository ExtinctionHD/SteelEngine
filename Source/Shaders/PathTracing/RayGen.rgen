#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#define SHADER_STAGE raygen
#pragma shader_stage(raygen)

#include "Common/Common.h"
#include "Common/Common.glsl"
#include "Common/Random.glsl"
#include "Common/RayTracing.h"
#include "Common/RayTracing.glsl"
#include "PathTracing/PathTracing.h"
#include "PathTracing/PathTracing.glsl"
#include "PathTracing/Lighting.glsl"

#define MIN_BOUNCE_COUNT 2
#define MAX_BOUNCE_COUNT 4

#define MIN_THRESHOLD 0.05

layout(constant_id = 1) const uint MATERIAL_COUNT = 256;

layout(push_constant) uniform PushConstants{
    uint accumIndex;
};

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D renderTarget;
layout(set = 1, binding = 0, rgba8) uniform image2D accumulationTarget;

layout(set = 2, binding = 0) uniform cameraBuffer{ CameraPT camera; };

layout(set = 3, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 3, binding = 1) uniform materialsBuffer{ MaterialRT materials[MATERIAL_COUNT]; };
layout(set = 3, binding = 2) uniform sampler2D textures[];

layout(set = 3, binding = 3) readonly buffer IndicesData{ uint indices[]; } indicesData[];
layout(set = 3, binding = 6) readonly buffer TexCoordsData{ vec2 texCoords[]; } texCoordsData[];

layout(location = 0) rayPayloadEXT Payload rayPayload;

uvec2 GetSeed(uvec2 id, uint frameIndex)
{
    const uint s0 = (id.x << 16) | id.y;
    const uint s1 = frameIndex;

    uvec2 seed = uvec2(GetHash(s0), GetHash(s1));
    Rand(seed);

    return seed;
}

vec3 GetPrimaryRayOrigin()
{
    const vec4 origin = camera.inverseView * vec4(0.0, 0.0, 0.0, 1.0);
    
    return origin.xyz;
}

vec3 GetPrimaryRayDireciton(uvec2 seed)
{
    const vec2 pixelSize = 1.0 / gl_LaunchSizeEXT.xy;
    const vec2 uv = pixelSize * gl_LaunchIDEXT.xy + pixelSize * NextVec2(seed);
    const vec2 xy = uv * 2.0 - 1.0;
    const vec4 target = camera.inverseProj * vec4(xy, 1.0, 1.0);
    const vec4 direction = camera.inverseView * vec4(normalize(target.xyz), 0.0);

    return normalize(direction.xyz);
}

void UnpackMaterial(Payload rayPayload, MaterialRT mat, inout Surface surface)
{
    surface.TBN = GetTBN(rayPayload.normal, rayPayload.tangent);
    if (mat.normalTexture >= 0)
    {
        vec3 normalSample = texture(textures[nonuniformEXT(mat.normalTexture)], rayPayload.texCoord).rgb * 2.0 - 1.0;
        normalSample = normalize(normalSample * vec3(mat.normalScale, mat.normalScale, 1.0));
        surface.TBN = GetTBN(TangentToWorld(normalSample, surface.TBN));
    }

    surface.baseColor = mat.baseColorFactor.rgb;
    if (mat.baseColorTexture >= 0)
    {
        surface.baseColor *= ToLinear(texture(textures[nonuniformEXT(mat.baseColorTexture)], rayPayload.texCoord).rgb);
    }

    surface.roughness = mat.roughnessFactor;
    surface.metallic = mat.metallicFactor;
    if (mat.roughnessMetallicTexture >= 0)
    {
        const vec2 roughnessMetallic = texture(textures[nonuniformEXT(mat.roughnessMetallicTexture)], rayPayload.texCoord).gb;
        surface.roughness *= roughnessMetallic.r;
        surface.metallic *= roughnessMetallic.g;
    }

    surface.emission = mat.emissionFactor.rgb;
    if (mat.emissionTexture >= 0)
    {
        surface.emission *= ToLinear(texture(textures[nonuniformEXT(mat.emissionTexture)], rayPayload.texCoord).rgb);
    }

    surface.F0 = mix(DIELECTRIC_F0, surface.baseColor, surface.metallic);
    surface.a  = surface.roughness * surface.roughness;
    surface.a2 = max(surface.a * surface.a, EPSILON);
    surface.sw = GetSpecularWeight(surface.baseColor, surface.F0, surface.metallic);
}

uvec3 GetIndices(uint instanceId, uint primitiveId)
{
    return uvec3(indicesData[nonuniformEXT(instanceId)].indices[primitiveId * 3 + 0],
                 indicesData[nonuniformEXT(instanceId)].indices[primitiveId * 3 + 1],
                 indicesData[nonuniformEXT(instanceId)].indices[primitiveId * 3 + 2]);
}

vec2 GetTexCoord(uint instanceId, uint i)
{
    return texCoordsData[nonuniformEXT(instanceId)].texCoords[i];
}

float TraceVisibilityRay(Ray ray)
{
    rayQueryEXT rayQuery;

    const uint rayFlags = gl_RayFlagsTerminateOnFirstHitEXT;

    rayQueryInitializeEXT(rayQuery, tlas, rayFlags, 0xFF,
            ray.origin, ray.TMin, ray.direction, ray.TMax);

    while(rayQueryProceedEXT(rayQuery))
    {
        if (rayQueryGetIntersectionTypeEXT(rayQuery, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
        {
            const uint customIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false);
            const uint primitiveId = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false);
            const vec2 hitCoord = rayQueryGetIntersectionBarycentricsEXT(rayQuery, false);

            const uint instanceId = customIndex & 0x0000FFFF;
            const uint materialId = customIndex >> 16;

            const uvec3 indices = GetIndices(instanceId, primitiveId);

            const vec2 texCoord0 = GetTexCoord(instanceId, indices[0]);
            const vec2 texCoord1 = GetTexCoord(instanceId, indices[1]);
            const vec2 texCoord2 = GetTexCoord(instanceId, indices[2]);
            
            const vec3 baryCoord = vec3(1.0 - hitCoord.x - hitCoord.y, hitCoord.x, hitCoord.y);

            const vec2 texCoord = BaryLerp(texCoord0, texCoord1, texCoord2, baryCoord);

            const MaterialRT mat = materials[materialId];

            float alpha = mat.baseColorFactor.a;
            if (mat.baseColorTexture >= 0)
            {
                alpha *= texture(textures[nonuniformEXT(mat.baseColorTexture)], texCoord).a;
            }

            if (alpha >= mat.alphaCutoff)
            {
                rayQueryConfirmIntersectionEXT(rayQuery);
            }
        }
    }

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT)
    {
        return rayQueryGetIntersectionTEXT(rayQuery, true);
    }

    return -1.0;
}

void AccumulateAndStore(vec3 value)
{
    const ivec2 targetCoord = ivec2(gl_LaunchIDEXT.xy);

    const vec4 lastValue = imageLoad(accumulationTarget, targetCoord);
    const vec4 result = (vec4(value, 1.0) + accumIndex * lastValue) / (accumIndex + 1.0);

    imageStore(accumulationTarget, targetCoord, result);
    imageStore(renderTarget, targetCoord, result);
}

void main()
{
    uvec2 seed = GetSeed(gl_LaunchIDEXT.xy, accumIndex);

    Ray ray;
    ray.origin = GetPrimaryRayOrigin();
    ray.direction = GetPrimaryRayDireciton(seed);
    ray.TMin = camera.zNear;
    ray.TMax = camera.zFar;

    const uint rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;

    traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 0,
            ray.origin, ray.TMin, ray.direction, ray.TMax, 0);

    vec3 irradiance = vec3(0.0);

    vec3 rayThroughput = vec3(1.0);
    float rayPdf = 1.0;

    Surface surface;

    for (uint bounceCount = 0; bounceCount < MAX_BOUNCE_COUNT; ++bounceCount)
    {
        if (IsMiss(rayPayload.hitT))
        {
            irradiance += rayPayload.normal.rgb * rayThroughput / rayPdf;
            break;
        }

        UnpackMaterial(rayPayload, materials[rayPayload.matId], surface);

        irradiance += surface.emission * rayThroughput / rayPdf;

        const vec3 p = ray.origin + ray.direction * rayPayload.hitT;
        const vec3 wo = normalize(WorldToTangent(-ray.direction, surface.TBN));

        vec4 light;
        const uint lightId = SampleLight(surface, p, wo, light, seed);
        if (light.w > 0.0)
        {
            ray = GenerateLightRay(lightId, light.xyz, surface, p);
            ray.origin += surface.TBN[2] * BIAS;

            if (IsMiss(TraceVisibilityRay(ray)))
            {
            }
        }
        
        vec3 wi; float pdf;
        vec3 bsdf = SampleBSDF(surface, wo, wi, pdf, seed);

        if (pdf < EPSILON || IsBlack(bsdf))
        {
            break;
        }

        const vec3 throughput = bsdf * CosThetaTangent(wi);

        rayThroughput *= throughput;
        rayPdf *= pdf;

        if (bounceCount >= MIN_BOUNCE_COUNT)
        {
            const float threshold = max(MIN_THRESHOLD, 1.0 - MaxComponent(rayThroughput));
            if (NextFloat(seed) < threshold)
            {
                break;
            }
            rayThroughput /= 1.0 - threshold;
        }

        ray.origin = p;
        ray.direction = TangentToWorld(wi, surface.TBN);
        ray.TMin = RAY_MIN_T;
        ray.TMax = RAY_MAX_T;

        traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 0,
                ray.origin, ray.TMin, ray.direction, ray.TMax, 0);
    }

    irradiance = ToneMapping(irradiance);
    AccumulateAndStore(irradiance);
}
