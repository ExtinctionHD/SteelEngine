#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#define SHADER_STAGE raygen
#pragma shader_stage(raygen)

#include "Common/Common.h"
#include "Common/Common.glsl"
#include "Common/Random.glsl"
#include "Common/RayTracing.h"
#include "Common/RayTracing.glsl"
#include "PathTracing/PathTracing.h"
#include "PathTracing/PathTracing.glsl"

#define SAMPLE_COUNT 1

#define MIN_BOUNCE_COUNT 2
#define MAX_BOUNCE_COUNT 4

#define MIN_THRESHOLD 0.05

#define POINT_LIGHT_COUNT 4

layout(constant_id = 0) const uint MATERIAL_COUNT = 256;

layout(push_constant) uniform PushConstants{
    uint accumIndex;
};

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D renderTarget;
layout(set = 1, binding = 0, rgba8) uniform image2D accumulationTarget;

layout(set = 2, binding = 0) uniform cameraBuffer{ CameraPT camera; };
layout(set = 2, binding = 1) uniform directLightBuffer{ DirectLight directLight; };
layout(set = 2, binding = 2) uniform samplerCube environmentMap;

layout(set = 3, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 3, binding = 1) uniform materialsBuffer{ MaterialRT materials[MATERIAL_COUNT]; };
layout(set = 3, binding = 2) uniform sampler2D textures[];

layout(set = 3, binding = 3) readonly buffer IndicesData{ uint indices[]; } indicesData[];
layout(set = 3, binding = 6) readonly buffer TexCoordsData{ vec2 texCoords[]; } texCoordsData[];

#if POINT_LIGHT_COUNT > 0
    layout(set = 4, binding = 0) uniform accelerationStructureEXT pointLightsTlas;
    layout(set = 4, binding = 1) uniform pointLightsBuffer{
        PointLight pointLights[POINT_LIGHT_COUNT];
    };
#endif

layout(location = 0) rayPayloadEXT MaterialPayload payload;
#if POINT_LIGHT_COUNT > 0
    layout(location = 1) rayPayloadEXT ColorPayload pointLightPayload;
#endif

uvec2 GetSeed(uvec2 id, uint sampleIndex, uint frameIndex)
{
    const uint s0 = (id.x << 16) | id.y;
    const uint s1 = (sampleIndex << 8) | frameIndex;

    uvec2 seed = uvec2(GetHash(s0), GetHash(s1));
    Rand(seed);

    return seed;
}

vec3 GetPrimaryRayOrigin()
{
    return camera.inverseView[3].xyz;
}

vec3 GetPrimaryRayDireciton(uvec2 seed)
{
    const vec2 pixelSize = 1.0 / gl_LaunchSizeEXT.xy;
    const vec2 uv = pixelSize * gl_LaunchIDEXT.xy + pixelSize * NextVec2(seed);
    const vec2 xy = uv * 2.0 - 1.0;
    const vec4 target = camera.inverseProj * vec4(xy, 1.0, 1.0);
    const vec4 direction = camera.inverseView * vec4(normalize(target.xyz), 0.0);

    return normalize(direction.xyz);
}

void UnpackMaterial(MaterialRT mat, inout Surface surface)
{
    surface.TBN = GetTBN(payload.normal, payload.tangent);
    if (mat.normalTexture >= 0)
    {
        vec3 normalSample = texture(textures[nonuniformEXT(mat.normalTexture)], payload.texCoord).rgb * 2.0 - 1.0;
        normalSample = normalize(normalSample * vec3(mat.normalScale, mat.normalScale, 1.0));
        surface.TBN = GetTBN(TangentToWorld(normalSample, surface.TBN));
    }

    surface.baseColor = mat.baseColorFactor.rgb;
    if (mat.baseColorTexture >= 0)
    {
        surface.baseColor *= ToLinear(texture(textures[nonuniformEXT(mat.baseColorTexture)], payload.texCoord).rgb);
    }

    surface.roughness = mat.roughnessFactor;
    surface.metallic = mat.metallicFactor;
    if (mat.roughnessMetallicTexture >= 0)
    {
        const vec2 roughnessMetallic = texture(textures[nonuniformEXT(mat.roughnessMetallicTexture)], payload.texCoord).gb;
        surface.roughness *= roughnessMetallic.r;
        surface.metallic *= roughnessMetallic.g;
    }

    surface.emission = mat.emissionFactor.rgb;
    if (mat.emissionTexture >= 0)
    {
        surface.emission *= ToLinear(texture(textures[nonuniformEXT(mat.emissionTexture)], payload.texCoord).rgb);
    }

    surface.F0 = mix(DIELECTRIC_F0, surface.baseColor, surface.metallic);
    surface.a  = surface.roughness * surface.roughness;
    surface.a2 = max(surface.a * surface.a, EPSILON);
    surface.sw = GetSpecularWeight(surface.baseColor, surface.F0, surface.metallic);
}

uvec3 GetIndices(uint instanceId, uint primitiveId)
{
    return uvec3(indicesData[nonuniformEXT(instanceId)].indices[primitiveId * 3 + 0],
                 indicesData[nonuniformEXT(instanceId)].indices[primitiveId * 3 + 1],
                 indicesData[nonuniformEXT(instanceId)].indices[primitiveId * 3 + 2]);
}

vec2 GetTexCoord(uint instanceId, uint i)
{
    return texCoordsData[nonuniformEXT(instanceId)].texCoords[i];
}

float TraceVisibilityRay(Ray ray)
{
    rayQueryEXT rayQuery;

    const uint rayFlags = gl_RayFlagsTerminateOnFirstHitEXT;

    rayQueryInitializeEXT(rayQuery, tlas, rayFlags, 0xFF,
            ray.origin, ray.TMin, ray.direction, ray.TMax);

    while(rayQueryProceedEXT(rayQuery))
    {
        if (rayQueryGetIntersectionTypeEXT(rayQuery, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
        {
            const uint customIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false);
            const uint primitiveId = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false);
            const vec2 hitCoord = rayQueryGetIntersectionBarycentricsEXT(rayQuery, false);

            const uint instanceId = customIndex & 0x0000FFFF;
            const uint materialId = customIndex >> 16;

            const uvec3 indices = GetIndices(instanceId, primitiveId);

            const vec2 texCoord0 = GetTexCoord(instanceId, indices[0]);
            const vec2 texCoord1 = GetTexCoord(instanceId, indices[1]);
            const vec2 texCoord2 = GetTexCoord(instanceId, indices[2]);
            
            const vec3 baryCoord = vec3(1.0 - hitCoord.x - hitCoord.y, hitCoord.x, hitCoord.y);

            const vec2 texCoord = BaryLerp(texCoord0, texCoord1, texCoord2, baryCoord);

            const MaterialRT mat = materials[materialId];

            float alpha = mat.baseColorFactor.a;
            if (mat.baseColorTexture >= 0)
            {
                alpha *= texture(textures[nonuniformEXT(mat.baseColorTexture)], texCoord).a;
            }

            if (alpha >= mat.alphaCutoff)
            {
                rayQueryConfirmIntersectionEXT(rayQuery);
            }
        }
    }

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT)
    {
        return rayQueryGetIntersectionTEXT(rayQuery, true);
    }

    return -1.0;
}

#if POINT_LIGHT_COUNT > 0
    bool IsPointLightHit()
    {
        if (IsHit(pointLightPayload.hitT))
        {
            if (IsMiss(payload.hitT) || pointLightPayload.hitT < payload.hitT)
            {
                return true;
            }
        }

        return false;
    }

    float EstimatePointLight(uint index, Surface surface, vec3 p, vec3 wo)
    {
        const vec3 direction = pointLights[index].position.xyz - p;
        const float distanceSquared = dot(direction, direction);

        const vec3 N = surface.TBN[2];
        const vec3 L = normalize(direction);

        const float NoL = max(dot(N, L), 0.0);

        const float luminance = Luminance(pointLights[index].color.rgb);

        return luminance * NoL / distanceSquared;
    }

    #define UNIFORM_LIGHT_SELECTION 0
    uint SamplePointLight(Surface surface, vec3 p, vec3 wo, out float pdf, inout uvec2 seed)
    {
    #if UNIFORM_LIGHT_SELECTION
        pdf = 1.0 / POINT_LIGHT_COUNT;
        return uint(NextFloat(seed) * POINT_LIGHT_COUNT);
    #else
        float irradianceEstimation[POINT_LIGHT_COUNT];

        irradianceEstimation[0] = EstimatePointLight(0, surface, p, wo);
        for (uint i = 1; i < POINT_LIGHT_COUNT; ++i)
        {
            irradianceEstimation[i] = EstimatePointLight(i, surface, p, wo);
            irradianceEstimation[i] += irradianceEstimation[i - 1];
        }

        for (uint i = 0; i < POINT_LIGHT_COUNT - 1; ++i)
        {
            irradianceEstimation[i] /= irradianceEstimation[POINT_LIGHT_COUNT - 1];
        }
        irradianceEstimation[POINT_LIGHT_COUNT - 1] = 1.0;

        const float randSample = NextFloat(seed);

        uint lightIndex = 0;
        for (lightIndex = 0; lightIndex < POINT_LIGHT_COUNT - 1; ++lightIndex)
        {
            if (randSample < irradianceEstimation[lightIndex])
            {
                break;
            }
        }

        pdf = irradianceEstimation[lightIndex];      
        if (lightIndex > 0)
        {
            pdf -= irradianceEstimation[lightIndex - 1];
        }

        return lightIndex;
    #endif
    }

    vec3 PointLighting(Surface surface, vec3 p, vec3 wo, inout uvec2 seed)
    {
        float lightPdf;
        const uint lightIndex = SamplePointLight(surface, p, wo, lightPdf, seed);

        const PointLight pointLight = pointLights[lightIndex];

        vec3 direction = pointLight.position.xyz - p;
        const float distanceSquared = dot(direction, direction);
        const float attenuation = Rcp(distanceSquared);

        direction = normalize(direction);

        const vec3 wi = WorldToTangent(direction, surface.TBN);
        const vec3 wh = normalize(wo + wi);

        Ray ray;
        ray.origin = p + surface.TBN[2] * BIAS;
        ray.direction = direction;
        ray.TMin = RAY_MIN_T;
        ray.TMax = sqrt(distanceSquared);

        if (IsMiss(TraceVisibilityRay(ray)))
        {
            const vec3 bsdf = EvaluateBSDF(surface, wo, wi, wh);

            return bsdf * CosThetaTangent(wi) * pointLight.color.rgb * attenuation / lightPdf;
        }
        
        return vec3(0.0);
    }
#endif

vec3 DirectLighting(Surface surface, vec3 p, vec3 wo)
{
    const vec3 direction = normalize(-directLight.direction.xyz);

    Ray ray;
    ray.origin = p + surface.TBN[2] * BIAS;
    ray.direction = direction;
    ray.TMin = RAY_MIN_T;
    ray.TMax = RAY_MAX_T;

    if (IsMiss(TraceVisibilityRay(ray)))
    {
        const vec3 wi = WorldToTangent(direction, surface.TBN);
        const vec3 wh = normalize(wo + wi);

        const vec3 bsdf = EvaluateBSDF(surface, wo, wi, wh);

        return bsdf * CosThetaTangent(wi) * directLight.color.rgb;
    }

    return vec3(0.0);
}

void AccumulateAndStore(vec3 value)
{
    const ivec2 targetCoord = ivec2(gl_LaunchIDEXT.xy);

    const vec4 lastValue = imageLoad(accumulationTarget, targetCoord);
    const vec4 result = (vec4(value, 1.0) + accumIndex * lastValue) / (accumIndex + 1.0);

    imageStore(accumulationTarget, targetCoord, result);
    imageStore(renderTarget, targetCoord, result);
}

void main()
{
    vec3 result = vec3(0.0);
    for (uint sampleIndex = 0; sampleIndex < SAMPLE_COUNT; ++sampleIndex)
    {
        uvec2 seed = GetSeed(gl_LaunchIDEXT.xy, sampleIndex, accumIndex);

        Ray ray;
        ray.origin = GetPrimaryRayOrigin();
        ray.direction = GetPrimaryRayDireciton(seed);
        ray.TMin = camera.zNear;
        ray.TMax = camera.zFar;

        const uint rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;

        traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 0,
                ray.origin, ray.TMin, ray.direction, ray.TMax, 0);

    #if POINT_LIGHT_COUNT > 0
        traceRayEXT(pointLightsTlas, 0, 0xFF, 0, 0, 1,
                ray.origin, ray.TMin, ray.direction, ray.TMax, 1);
    #endif

        vec3 irradiance = vec3(0.0);

        vec3 rayThroughput = vec3(1.0);
        float rayPdf = 1.0;

        Surface surface;

        for (uint bounceCount = 0; bounceCount < MAX_BOUNCE_COUNT; ++bounceCount)
        {
        #if POINT_LIGHT_COUNT > 0
            if (bounceCount == 0 && IsPointLightHit())
            {
                irradiance = pointLightPayload.color;
                break;
            }
        #endif

            if (IsMiss(payload.hitT))
            {
                irradiance += texture(environmentMap, ray.direction).rgb * rayThroughput / rayPdf;
                break;
            }

            UnpackMaterial(materials[payload.matId], surface);

            irradiance += surface.emission * rayThroughput / rayPdf;

            const vec3 p = ray.origin + ray.direction * payload.hitT;
            const vec3 wo = normalize(WorldToTangent(-ray.direction, surface.TBN));

        #if POINT_LIGHT_COUNT > 0
            irradiance += PointLighting(surface, p, wo, seed) * rayThroughput / rayPdf;
        #endif
            irradiance += DirectLighting(surface, p, wo) * rayThroughput / rayPdf;
            
            vec3 wi; float pdf;
            vec3 bsdf = SampleBSDF(surface, wo, wi, pdf, seed);

            if (pdf < EPSILON || IsBlack(bsdf))
            {
                break;
            }

            const vec3 throughput = bsdf * CosThetaTangent(wi);

            rayThroughput *= throughput;
            rayPdf *= pdf;

            if (bounceCount >= MIN_BOUNCE_COUNT)
            {
                const float threshold = max(MIN_THRESHOLD, 1.0 - MaxComponent(rayThroughput));
                if (NextFloat(seed) < threshold)
                {
                    break;
                }
                rayThroughput /= 1.0 - threshold;
            }

            ray.origin = p;
            ray.direction = TangentToWorld(wi, surface.TBN);
            ray.TMin = RAY_MIN_T;
            ray.TMax = RAY_MAX_T;

            traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 0,
                    ray.origin, ray.TMin, ray.direction, ray.TMax, 0);
        }

        result += ToneMapping(irradiance);
    }

    result /= SAMPLE_COUNT;

    AccumulateAndStore(result);
}
