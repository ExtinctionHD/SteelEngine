#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE raygen
#pragma shader_stage(raygen)

#include "PathTracing/PathTracing.h"
#include "PathTracing/PathTracing.glsl"
#include "Common/Common.glsl"
#include "Utils/Random.glsl"

layout(push_constant) uniform PushConstants{
    uint frameIndex;
};

layout(set = 0, binding = 0, rgba32f) uniform image2D renderTarget;
layout(set = 1, binding = 0) uniform accelerationStructureNV tlas;
layout(set = 1, binding = 1) uniform Camera{ 
    CameraData camera;
};

layout(location = 0) rayPayloadNV vec3 outColor;

void main() 
{
    uvec2 seed = GetSeed(gl_LaunchIDNV.xy, frameIndex);

    const vec2 pixelSize = 1.0f / gl_LaunchSizeNV.xy;
    const vec2 uv = pixelSize * gl_LaunchIDNV.xy + pixelSize * RandVec2(seed);
    const vec2 xy = uv * 2.0f - 1.0f;

    const vec4 origin = camera.inverseView * vec4(0.0f, 0.0f, 0.0f, 1.0f);
    const vec4 target = camera.inverseProj * vec4(xy, 1.0f, 1.0f) ;
    const vec4 direction = camera.inverseView * vec4(normalize(target.xyz), 0.0f);

    traceNV(tlas, 
            gl_RayFlagsOpaqueNV,
            0xFF,
            0, 0, 0,
            origin.xyz,
            camera.zNear,
            direction.xyz,
            camera.zFar,
            0);

    // Uncharted 2 tonemapping
    //const float A = 0.22f;
    //const float B = 0.30f;
    //const float C = 0.10f;
    //const float D = 0.20f;
    //const float E = 0.01f;
    //const float F = 0.30f;
    //const float WP = 11.2f;
    //outColor = ((outColor * (A * outColor + C * B) + D * E) / (outColor * (A * outColor + B) + D * F)) - E / F;
    //outColor /= ((WP * (A * WP + C * B) + D * E) / (WP * (A * WP + B) + D * F)) - E / F;
    //outColor = ToSrgb(outColor);

    // Jim Hejl and Richard Burgess-Dawson tonemapping
    outColor = max(vec3(0.0f), outColor - vec3(0.004f));
    outColor = (outColor * (6.2f * outColor + 0.5f)) / (outColor * (6.2f * outColor + 1.7f) + 0.06f);

    //outColor = ToSrgb(outColor);

    imageStore(renderTarget, ivec2(gl_LaunchIDNV.xy), vec4(outColor, 1.0f));
}
