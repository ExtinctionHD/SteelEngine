#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE raygen
#pragma shader_stage(raygen)

#include "PathTracing/PathTracing.h"
#include "PathTracing/PathTracing.glsl"
#include "Common/Common.glsl"
#include "Common/Random.glsl"

layout(push_constant) uniform PushConstants{
    uint frameIndex;
};

layout(set = 0, binding = 0, rgba32f) uniform image2D renderTarget;
layout(set = 1, binding = 0) uniform accelerationStructureNV tlas;
layout(set = 1, binding = 1) uniform Camera{ 
    CameraData camera;
};

layout(location = 0) rayPayloadNV Payload raygen;

void main() 
{
    raygen.T = vec3(1);
    raygen.L = vec3(0);
    raygen.depth = 0;
    raygen.seed = GetSeed(gl_LaunchIDNV.xy, frameIndex);

    const vec2 pixelSize = 1.0 / gl_LaunchSizeNV.xy;
    const vec2 uv = pixelSize * gl_LaunchIDNV.xy + pixelSize * NextVec2(raygen.seed);
    const vec2 xy = uv * 2 - 1;

    const vec4 origin = camera.inverseView * vec4(0, 0, 0, 1);
    const vec4 target = camera.inverseProj * vec4(xy, 1, 1) ;
    const vec4 direction = camera.inverseView * vec4(normalize(target.xyz), 0);

    traceNV(tlas, 
            gl_RayFlagsOpaqueNV,
            0xFF,
            0, 0, 0,
            origin.xyz,
            camera.zNear,
            direction.xyz,
            camera.zFar,
            0);

    // Uncharted 2 tonemapping
    //const float A = 0.22;
    //const float B = 0.30;
    //const float C = 0.10;
    //const float D = 0.20;
    //const float E = 0.01;
    //const float F = 0.30;
    //const float WP = 11.2;
    //raygen.L = ((raygen.L * (A * raygen.L + C * B) + D * E) / (raygen.L * (A * raygen.L + B) + D * F)) - E / F;
    //raygen.L /= ((WP * (A * WP + C * B) + D * E) / (WP * (A * WP + B) + D * F)) - E / F;
    //raygen.L = ToSrgb(raygen.L);

    // Jim Hejl and Richard Burgess-Dawson tonemapping
    raygen.L = max(vec3(0), raygen.L - vec3(0.004));
    raygen.L = (raygen.L * (6.2 * raygen.L + 0.5)) / (raygen.L * (6.2 * raygen.L + 1.7) + 0.06);

    //raygen.L = ToSrgb(raygen.L);

    imageStore(renderTarget, ivec2(gl_LaunchIDNV.xy), vec4(raygen.L, 1));
}
