#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE raygen
#pragma shader_stage(raygen)

#include "PathTracing/PathTracing.h"
#include "PathTracing/PathTracing.glsl"

layout(set = 0, binding = 0, rgba32f) uniform image2D renderTarget;
layout(set = 1, binding = 0) uniform accelerationStructureNV tlas;
layout(set = 1, binding = 1) uniform Camera{ 
    CameraData camera;
};

layout(location = 0) rayPayloadNV vec3 outColor;

void main() 
{
    const vec2 uv = vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy - 1);
    const vec2 xy = vec2(uv * 2.0f - 1.0f);

    const vec4 origin = camera.inverseView * vec4(0.0f, 0.0f, 0.0f, 1.0f);
    const vec4 target = camera.inverseProj * vec4(xy, 1.0f, 1.0f) ;
    const vec4 direction = camera.inverseView * vec4(normalize(target.xyz), 0.0f);

    traceNV(
        tlas, 
        gl_RayFlagsOpaqueNV,
        0xFF,
        0, 0, 0,
        origin.xyz,
        camera.zNear,
        direction.xyz,
        camera.zFar,
        0);

    imageStore(renderTarget, ivec2(gl_LaunchIDNV.xy), vec4(outColor, 1.0f));
}
