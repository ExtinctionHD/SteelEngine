#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#define SHADER_STAGE intersect
#pragma shader_stage(intersect)

#include "Common/RayTracing.glsl"

struct Sphere
{
    vec3 center;
    float radius;
};

float SphereIntersection(Sphere sphere, Ray ray)
{
    const vec3 L = ray.origin - sphere.center;

    const float a = dot(ray.direction, ray.direction);
    const float b = 2.0 * dot(L, ray.direction);
    const float c = dot(L, L) - sphere.radius * sphere.radius;

    const float D = b * b - 4.0 * a * c;

    if(D < 0.0)
    {
        return -1.0;
    }

    return (-b - sqrt(D)) / (2.0 * a);
}

void main()
{
    Sphere sphere;
    sphere.center = vec3(0.0);
    sphere.radius = 0.5;

    Ray ray;
    ray.origin = gl_ObjectRayOriginEXT;
    ray.direction = gl_ObjectRayDirectionEXT;

    const float hitT = SphereIntersection(sphere, ray);

    if (hitT > 0.0)
    {
        reportIntersectionEXT(hitT, 0);
    }
}
